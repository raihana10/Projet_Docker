name: Jira Transition Workflow
on:
  pull_request_target:
    types: [closed]
    branches: [main]

jobs:
  transition-issue:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Jira Issue Key
        id: extract-key
        run: |
          KEY=$(echo "${{ github.event.pull_request.title }}" | grep -oE '[A-Z]{2,}-[0-9]+' | head -1)
          [ -z "$KEY" ] && KEY=$(echo "${{ github.event.pull_request.head.ref }}" | grep -oE '[A-Z]{2,}-[0-9]+' | head -1)
          echo "issue=${KEY:-NOT_FOUND}" >> $GITHUB_OUTPUT

      - name: Find Transition ID
        if: steps.extract-key.outputs.issue != 'NOT_FOUND'
        id: find-transition
        run: |
          echo "Issue key: ${{ steps.extract-key.outputs.issue }}"
          echo "Jira URL: ${{ secrets.JIRA_BASE_URL }}"
          
          # Vérifier si l'URL se termine par un slash et corriger
          BASE_URL=$(echo "${{ secrets.JIRA_BASE_URL }}" | sed 's/\/$//')
          echo "URL formatée: $BASE_URL"
          
          # Récupérer les transitions avec verbose pour plus d'informations
          echo "Récupération des transitions disponibles..."
          HTTP_RESPONSE=$(curl -v \
            --request GET \
            --url "${BASE_URL}/rest/api/2/issue/${{ steps.extract-key.outputs.issue }}/transitions" \
            --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" 2>&1)
          
          echo "Réponse complète de la requête curl:"
          echo "$HTTP_RESPONSE"
          
          # Extraire la partie JSON de la réponse (ignorer les en-têtes et messages de curl)
          TRANSITIONS_RESPONSE=$(echo "$HTTP_RESPONSE" | sed -n '/^{/,/^}/p')
          
          echo "Partie JSON extraite:"
          echo "$TRANSITIONS_RESPONSE"
          
          # Utilisons jq si disponible pour un traitement JSON plus fiable
          if command -v jq &> /dev/null; then
            echo "Utilisation de jq pour traiter le JSON"
            echo "$TRANSITIONS_RESPONSE" > transitions.json
            
            # Afficher toutes les transitions disponibles
            echo "Transitions disponibles:"
            jq -r '.transitions[] | .name' transitions.json || echo "Erreur lors de l'analyse JSON avec jq"
            
            # Rechercher l'ID pour TERMINÉ(E) ou Done
            TRANSITION_ID=$(jq -r '.transitions[] | select(.name=="TERMINÉ(E)") | .id' transitions.json)
            
            if [ -z "$TRANSITION_ID" ] || [ "$TRANSITION_ID" = "null" ]; then
              echo "Transition 'TERMINÉ(E)' non trouvée, recherche de 'Done'..."
              TRANSITION_ID=$(jq -r '.transitions[] | select(.name=="Done") | .id' transitions.json)
            fi
          else
            echo "jq non disponible, utilisation de grep/sed"
            # Afficher les transitions disponibles
            echo "Transitions disponibles (via grep):"
            echo "$TRANSITIONS_RESPONSE" | grep -o '"name":"[^"]*"' | sed 's/"name":"//g' | sed 's/"//g' || echo "Aucune transition trouvée via grep"
            
            # Rechercher l'ID pour TERMINÉ(E) ou Done
            TRANSITION_ID=$(echo "$TRANSITIONS_RESPONSE" | grep -o '"id":"[^"]*","name":"TERMINÉ(E)"' | sed 's/.*"id":"//g' | sed 's/","name.*//g')
            
            if [ -z "$TRANSITION_ID" ]; then
              echo "Transition 'TERMINÉ(E)' non trouvée, recherche de 'Done'..."
              TRANSITION_ID=$(echo "$TRANSITIONS_RESPONSE" | grep -o '"id":"[^"]*","name":"Done"' | sed 's/.*"id":"//g' | sed 's/","name.*//g')
            fi
          fi
          
          # Afficher manuellement toutes les transitions pour débogage
          echo "Contenu brut du JSON des transitions:"
          echo "$TRANSITIONS_RESPONSE"
          
          if [ -z "$TRANSITION_ID" ]; then
            echo "❌ Échec: Aucune transition 'TERMINÉ(E)' ou 'Done' trouvée"
            exit 1
          else
            echo "✅ ID de transition trouvé: $TRANSITION_ID"
            echo "transition_id=$TRANSITION_ID" >> $GITHUB_OUTPUT
          fi

      - name: Transition Jira Issue
        if: steps.extract-key.outputs.issue != 'NOT_FOUND' && steps.find-transition.outputs.transition_id != ''
        run: |
          ISSUE_KEY="${{ steps.extract-key.outputs.issue }}"
          TRANSITION_ID="${{ steps.find-transition.outputs.transition_id }}"
          
          echo "Transition de l'issue $ISSUE_KEY vers l'état 'TERMINÉ(E)' (ID: $TRANSITION_ID)..."
          
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            --request POST \
            --url "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$ISSUE_KEY/transitions" \
            --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}")
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '$ d')
          
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
            echo "✅ Issue $ISSUE_KEY transitionné avec succès vers 'TERMINÉ(E)'"
          else
            echo "❌ Échec de la transition de l'issue $ISSUE_KEY: HTTP $HTTP_STATUS"
            echo "Réponse: $RESPONSE_BODY"
            exit 1
          fi