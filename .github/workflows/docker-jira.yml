name: Laravel Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    
    services:
      # Service MySQL pour les tests de base de donnÃ©es
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, gd
          coverage: xdebug
      
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      
      - name: Copy .env.example
        run: |
          cp .env.example .env
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/g' .env
          sed -i 's/DB_DATABASE=laravel/DB_DATABASE=laravel_test/g' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=root/g' .env
          sed -i 's/DB_PASSWORD=/DB_PASSWORD=password/g' .env
      
      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist
      
      - name: Generate Application Key
        run: php artisan key:generate
      
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      
      - name: Run Database Migrations
        run: php artisan migrate --no-interaction --force
      
      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit --coverage-text
      
      - name: Run PHP Code Sniffer
        run: |
          if [ -f "vendor/bin/phpcs" ]; then
            vendor/bin/phpcs --standard=PSR12 app/
          else
            echo "PHP Code Sniffer not installed, skipping..."
          fi
      
      - name: Run PHP Static Analysis
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            vendor/bin/phpstan analyse app/
          else
            echo "PHPStan not installed, skipping..."
          fi
      
      - name: Run JavaScript Tests
        run: |
          if [ -f "package.json" ]; then
            npm install
            npm run test
          else
            echo "No package.json found, skipping JavaScript tests..."
          fi