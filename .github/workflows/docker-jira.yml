
name: Laravel Docker CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  pull_request_target:
    types: [closed]
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder step
        run: echo "Build and test steps would go here"
  update-jira-status:
    needs: build-and-test
    if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Extract Jira Issue Key
        id: extract_jira_key
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"

          # Look for Jira ticket pattern in PR title (e.g., PROJECT-123)
          JIRA_KEY=$(echo "$PR_TITLE" | grep -oE '[A-Z]+-[0-9]+' | head -1)

          # If not found in title, look in PR description
          if [ -z "$JIRA_KEY" ]; then
            JIRA_KEY=$(echo "$PR_BODY" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          fi

          if [ -n "$JIRA_KEY" ]; then
            echo "Found Jira ticket: $JIRA_KEY"
            echo "jira_key=$JIRA_KEY" >> $GITHUB_OUTPUT
          else
            echo "No Jira ticket found"
            echo "jira_key=" >> $GITHUB_OUTPUT
          fi

name: Transition Jira Issue if: steps.extract_jira_key.outputs.jira_key != '' uses: atlassian/gajira-transition@v3 with: issue: ${{ steps.extract_jira_key.outputs.jira_key }} transition: "Done" env: JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }} JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }} JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }} update de ticket est skipé
Modifier
I'm looking at a GitHub Actions workflow file for a Laravel Docker CI pipeline. There seems to be an issue where the Jira ticket update step is being skipped. Let me analyze the workflow and identify the problem.

The workflow has three main components:

Triggers on push to main, pull requests to main, and closed pull requests
A build-and-test job (currently a placeholder)
A Jira status update job that should run when pull requests are merged
The issue appears to be with the Jira status update. Based on your comment "update de ticket est skipé" (the ticket update is skipped), let's examine why this might be happening.

The most likely causes for the Jira update being skipped are:

The conditional that runs the job isn't being satisfied
The Jira key extraction is failing
There's an issue with the Jira transition step
Let me analyze the workflow step by step and suggest fixes:

Analyzing the Workflow
The update-jira-status job has this condition:

yaml
if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
This means it will only run when:

The trigger event is pull_request_target (not regular pull_request)
The pull request was merged (not just closed)
Potential Fixes
Here's an improved version of your workflow with several fixes and enhancements:


Enhanced Laravel Docker CI Workflow
Code 
Key Changes I Made to Fix the Issue:
Expanded the conditional logic:
The job now runs for both pull_request_target and regular pull_request events when they're merged
This prevents the job from being skipped if you're using the wrong event type
Added debugging output:
Added echo statements to show the PR title and body that are being checked
Added a debug step that shows event information to help troubleshoot
Improved error handling:
Added an explicit exit 0 when no Jira ticket is found to ensure the workflow doesn't fail
This ensures the workflow continues even if a PR doesn't have an associated Jira ticket
Additional Troubleshooting Tips:
Check your branch configuration:
Make sure PRs are indeed being merged to the main branch
Check your Jira ticket format:
Confirm your team is using the standard format (e.g., PROJECT-123) in PR titles or descriptions
Check GitHub secrets:
Ensure JIRA_BASE_URL, JIRA_USER_EMAIL, and JIRA_API_TOKEN are correctly set in your repository secrets
Verify Jira transition ID:
If "Done" isn't a valid transition name in your Jira workflow, you might need to use a transition ID instead
You can find transition IDs through the Jira API
Would you like me to explain any part of this workflow in more detail or suggest other improvements?




image.png
Modifier
I can see the GitHub Actions workflow run interface you've shared. The issue is now clearer - the update-jira-status job was skipped even though the build-and-test job ran successfully. This screenshot shows:

The workflow file is named docker-jira.yml (run #6)
The workflow was triggered by a push to the main branch by user douaem1
The build-and-test job completed successfully in 4s
The update-jira-status job was skipped (shown with the circle with a slash)
Now I understand why the Jira ticket update is being skipped. Looking at the workflow configuration, the issue is with the trigger condition:

The Problem
The update-jira-status job has this condition:

yaml
if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
But in your screenshot, the workflow was triggered by a push event to the main branch, not a pull request event. The job is correctly being skipped because it's designed to only run on merged pull requests.

Solution
If you want the Jira status update to happen on pushes to main as well (which often happen after merges), you need to modify the conditional:


Enhanced Laravel Docker CI Workflow
Code ∙ Version 2 

Enhanced Laravel Docker CI Workflow
Code ∙ Version 3 

Enhanced Laravel Docker CI Workflow
Code ∙ Version 4 

Enhanced Laravel Docker CI Workflow
Code ∙ Version 5 



non je veux l apdate apres que l admin github merge cela dans le main

Modifier
Je comprends maintenant - vous voulez que la mise à jour Jira se fasse uniquement après qu'un administrateur GitHub ait mergé une pull request dans la branche main. C'est effectivement une utilisation spécifique.

Le problème dans votre cas est que votre workflow est correctement configuré pour réagir aux pull requests mergées, mais il semble que l'événement qui déclenche ce comportement n'est pas celui utilisé.

Voici une version corrigée qui se concentre sur le cas spécifique des pull requests mergées :


Enhanced Laravel Docker CI Workflow
Code ∙ Version 6 
D'après votre commentaire, je comprends maintenant que vous voulez spécifiquement que la mise à jour Jira se produise uniquement quand une pull request est mergée dans la branche main par un administrateur GitHub.

Voici les points importants à comprendre sur ce workflow corrigé :

Le bon événement déclencheur : L'événement pull_request_target avec le type closed et la condition github.event.pull_request.merged == true est exactement ce qu'il faut pour détecter qu'une PR a été mergée.
Pourquoi ça ne fonctionnait pas avant : Sur votre capture d'écran, le workflow a été déclenché par un événement push (comme indiqué par "Triggered via push now"). Le job Jira a été ignoré car vous n'aviez pas de condition pour les événements push.
Différence entre push et pull_request :
L'événement push se produit chaque fois que quelqu'un pousse du code dans la branche main
L'événement pull_request_target (quand une PR est mergée) est spécifiquement ce que vous recherchez
Étapes de débogage ajoutées :
J'ai inclus une étape de débogage qui affichera les détails de l'événement
Cela vous aidera à voir exactement ce qui se passe lors de l'exécution
Points à vérifier si ça ne fonctionne toujours pas :
Assurez-vous que vos pull requests contiennent bien des identifiants Jira (ex: PROJECT-123)
Vérifiez que les secrets GitHub pour Jira sont correctement configurés
Vérifiez que la transition "Done" existe bien dans votre workflow Jira
Le workflow est maintenant configuré uniquement pour mettre à jour le ticket Jira lorsqu'une pull request est mergée, ce qui semble être exactement ce que vous souhaitez.




mais aucune pull request n'a ete crer

Modifier
Je comprends maintenant le problème. Si aucune pull request n'a été créée et que vous faites des push directement sur la branche main, alors le workflow n'exécutera jamais la tâche de mise à jour Jira.

Pour résoudre ce problème, vous avez deux options:

Option 1: Adapter votre workflow pour fonctionner avec les push directs

Enhanced Laravel Docker CI Workflow
Code ∙ Version 7 
Option 2: Utiliser un workflow de pull request
Si vous souhaitez maintenir une bonne pratique de développement, envisagez d'utiliser des pull requests plutôt que des push directs sur main. Voici comment:

Créez une branche pour vos changements (par exemple git checkout -b feature/PROJ-123)
Faites vos modifications et commitez avec un message incluant le numéro de ticket (git commit -m "PROJ-123: Ajout de fonctionnalité X")
Poussez votre branche (git push origin feature/PROJ-123)
Créez une pull request sur GitHub
Une fois la PR mergée, le workflow s'exécutera automatiquement
Explications de la solution
Le workflow que j'ai proposé:

Fonctionne avec les push directs sur la branche main
Extrait les numéros de ticket Jira directement depuis les messages de commit
Conserve aussi la fonctionnalité pour les PR si vous décidez d'en utiliser à l'avenir
Pour que cela fonctionne, vous devez:

Toujours inclure le numéro de ticket Jira dans vos messages de commit
Exemple: git commit -m "PROJ-123: Description de la modification"
Le format doit être un code de projet en majuscules suivi d'un tiret et d'un numéro (ex: PROJ-123)
Vérifier les secrets GitHub
Assurez-vous que JIRA_BASE_URL, JIRA_USER_EMAIL et JIRA_API_TOKEN sont bien configurés
Cette solution est la plus simple et la plus directe pour votre cas d'utilisation actuel. Elle permettra au workflow de fonctionner que vous utilisiez des push directs ou des pull requests à l'avenir.




dans la ersion precedente je dois pusher dans une branch

Modifier
Je comprends maintenant. Vous souhaitez créer un workflow où:

Vous poussez d'abord le code dans une branche de fonctionnalité (pas directement dans main)
Ensuite, un administrateur GitHub fusionne cette branche dans main
À ce moment-là, le ticket Jira doit être mis à jour automatiquement
Voici le workflow qui correspond à ce processus:


Enhanced Laravel Docker CI Workflow
Code ∙ Version 8 
Explications du workflow pour votre cas d'utilisation
Ce workflow est spécifiquement conçu pour votre processus de développement:

Processus de développement:
Vous développez sur une branche de fonctionnalité (par exemple feature/PROJ-123)
Vous créez une PR pour merger cette branche dans main
Un administrateur GitHub approuve et merge la PR
Le job update-jira-status s'exécute automatiquement après le merge
Déclencheurs du workflow:
push: Exécuté pour tous les push sur n'importe quelle branche
pull_request: Exécuté quand une PR est ouverte vers main
pull_request_target: Exécuté quand une PR est fermée (mergée ou refusée)
Conditions pour la mise à jour Jira:
yaml
if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
Cette condition vérifie:
Que l'événement est bien une PR fermée
Que la PR a été mergée (pas simplement fermée)
Que la branche cible était main
Recherche du ticket Jira dans:
Le titre de la PR
La description de la PR
Le nom de la branche
Comment utiliser ce workflow
Convention de nommage pour les branches:
Utilisez le format feature/PROJ-123-description ou un format similaire qui inclut le numéro de ticket Jira
Création de PR:
Incluez le numéro de ticket Jira dans le titre de la PR (ex: "PROJ-123: Ajout de fonctionnalité X")
Ou dans la description de la PR
Après le merge:
Le workflow s'exécutera automatiquement
Le ticket Jira sera transitionné vers "Done"
Cette approche est considérée comme une bonne pratique car elle:

Facilite la revue de code
Maintient un historique clair des changements
Automatise la mise à jour des tickets Jira
Si vous avez des questions sur le fonctionnement spécifique de certaines parties du workflow, n'hésitez pas à demander.




il doit etre TERMIN25(E)

Modifier
Je comprends, vous voulez que le statut Jira soit changé spécifiquement à "TERMINE" ou "TERMINÉE" au lieu de "Done". Voici la correction:


Enhanced Laravel Docker CI Workflow
Code ∙ Version 9 
Voilà! Le workflow est maintenant mis à jour pour utiliser le statut "TERMINE" dans Jira au lieu de "Done".

Points importants à noter:
Sensibilité à la casse: Les noms de transition Jira sont sensibles à la casse. Assurez-vous que "TERMINE" correspond exactement au nom de la transition dans votre workflow Jira.
Alternatives possibles: Si vous rencontrez des problèmes, vous pouvez également:
Utiliser l'ID de transition au lieu du nom (par exemple transition: "31")
Essayer avec "TERMINÉE" (avec accent) si votre Jira utilise cette orthographe
Débogage: Si la transition ne fonctionne pas, vérifiez les logs du workflow pour voir le message d'erreur exact.
Test: Pour être sûr que tout fonctionne correctement:
Créez une branche avec un numéro de ticket Jira (ex: feature/PROJ-123)
Créez une PR pour merger cette branche dans main
Après l'approbation et le merge, vérifiez que le statut du ticket est bien passé à "TERMINE"
Ce workflow devrait maintenant fonctionner exactement comme vous le souhaitez, en mettant à jour le statut du ticket Jira à "TERMINE" lorsqu'une PR est mergée dans la branche main.




image.png
pour qou cela

Modifier
Je vois que sur la capture d'écran, le job update-jira-status est toujours ignoré, même après que le job build-and-test a réussi (en 2 secondes).

Le problème est que cette exécution a été déclenchée par un événement push (comme on peut le voir avec "on: push" en haut de l'image), mais notre workflow est configuré pour mettre à jour Jira uniquement lorsqu'une pull request est mergée.

Voici pourquoi cela se produit et comment le résoudre:

Raison du problème
Le workflow s'exécute bien sur un push, mais le job update-jira-status est configuré pour s'exécuter uniquement sur un événement pull_request_target avec une PR mergée
Comme votre capture montre un événement push, le job est ignoré
Solution
Si vous voulez que la mise à jour Jira fonctionne aussi sur les push directs à main (sans passer par une pull request), nous devons modifier la condition:


Enhanced Laravel Docker CI Workflow
Code ∙ Version 10 

Enhanced Laravel Docker CI Workflow
Code ∙ Version 11 

Enhanced Laravel Docker CI Workflow
Code ∙ Version 12 

Enhanced Laravel Docker CI Workflow
Code ∙ Version 13 



comment crer un pull request

Modifier
Comment créer une pull request sur GitHub
Voici un guide étape par étape pour créer une pull request (PR) sur GitHub:

Prérequis
Avoir un compte GitHub
Avoir accès au dépôt sur lequel vous souhaitez contribuer
Git installé sur votre machine locale
Étapes pour créer une pull request
1. Cloner le dépôt (si ce n'est pas déjà fait)
bash
git clone https://github.com/organisation/nom-du-repo.git
cd nom-du-repo
2. Créer une nouvelle branche
Créez une branche pour vos modifications. Idéalement, incluez le numéro du ticket Jira dans le nom:

bash
git checkout -b feature/PROJ-123-description-breve
3. Effectuer vos modifications
Faites les modifications nécessaires sur votre branche locale.

4. Committer vos modifications
Ajoutez et committez vos changements en incluant la référence au ticket Jira:

bash
git add .
git commit -m "PROJ-123: Description des modifications"
5. Pousser votre branche vers GitHub
bash
git push origin feature/PROJ-123-description-breve
6. Créer la pull request sur GitHub
Allez sur votre dépôt GitHub dans votre navigateur
Vous devriez voir une bannière suggérant de créer une pull request pour votre branche récemment poussée
Sinon, cliquez sur l'onglet "Pull requests" puis sur le bouton "New pull request"
7. Configurer la pull request
Sélectionnez la branche de base (généralement main) dans le menu déroulant de gauche
Sélectionnez votre branche (feature/PROJ-123-description-breve) dans le menu déroulant de droite
Cliquez sur "Create pull request"
8. Remplir les informations de la pull request
Titre: Incluez le numéro du ticket Jira (ex: "PROJ-123: Ajout de fonctionnalité X")
Description:
Décrivez les changements apportés
Mentionnez les problèmes résolus
Ajoutez des instructions de test si nécessaire
Cliquez sur "Create pull request"
9. Attendre la revue et le merge
Demandez à un ou plusieurs collègues de revoir votre code
Apportez des modifications si nécessaire en réponse aux commentaires
Une fois la PR approuvée, un administrateur pourra la merger dans la branche principale
Après le merge, si votre workflow GitHub Actions est correctement configuré comme nous l'avons mis en place précédemment, le ticket Jira correspondant sera automatiquement mis à jour avec le statut "TERMINE".

Est-ce que vous avez besoin d'aide sur une étape spécifique de ce processus?




On branch SCRUM-2-team-jira-github-douae
nothing to commit, working tree clean

Modifier
Je vois que vous êtes déjà sur une branche nommée SCRUM-2-team-jira-github-douae, ce qui est parfait car elle contient un identifiant Jira (SCRUM-2). Votre branche est propre et il n'y a rien à committer pour le moment.

Pour continuer le processus de création de pull request, vous devez:

1. Vérifier si vous avez déjà des changements sur cette branche
Il semble que votre branche soit propre ("working tree clean"), ce qui signifie deux possibilités:

Soit vous n'avez pas encore fait de modifications
Soit vous avez déjà commité vos modifications
Pour vérifier si vous avez déjà des commits sur cette branche qui ne sont pas sur la branche principale, utilisez:

bash
git log origin/main..HEAD
2. Si vous n'avez pas encore fait de modifications
Faites vos modifications, puis committez-les:

bash
# Faites vos modifications aux fichiers...

# Ensuite ajoutez et committez
git add .
git commit -m "SCRUM-2: Description de vos modifications"
3. Poussez votre branche vers GitHub
Si c'est la première fois que vous poussez cette branche:

bash
git push -u origin SCRUM-2-team-jira-github-douae
Si vous avez déjà poussé cette branche avant:

bash
git push
4. Créer la pull request sur GitHub
Après avoir poussé votre branche, allez sur GitHub
Vous devriez voir une bannière proposant de créer une pull request, ou bien:
Allez dans l'onglet "Pull requests" et cliquez sur "New pull request"
Sélectionnez main comme branche de base (à gauche)
Sélectionnez SCRUM-2-team-jira-github-douae comme branche à comparer (à droite)
Cliquez sur "Create pull request"
Ajoutez un titre qui inclut "SCRUM-2" (par exemple: "SCRUM-2: Integration GitHub-Jira")
Ajoutez une description si nécessaire
Cliquez sur "Create pull request"
Si vous avez besoin d'instructions plus spécifiques pour votre situation, n'hésitez pas à me le faire savoir!




cela n 'a pas ete pusher

Modifier
D'accord, si votre branche n'a pas encore été poussée sur GitHub, voici les étapes à suivre:

1. Vérifiez si vous avez des modifications à committer
Puisque vous avez le message "working tree clean", cela signifie que vous n'avez pas de modifications non committées. Mais vous devez vérifier si vous avez déjà des commits sur cette branche:

bash
git log -n 5
Cela vous montrera les 5 derniers commits sur votre branche.

2. Créez quelques modifications (si nécessaire)
Si vous n'avez pas encore de modifications, faites-en quelques-unes:

bash
# Par exemple, modifiez un fichier existant ou créez-en un nouveau
echo "# Test pour SCRUM-2" > test.md
3. Committez ces modifications
bash
git add .
git commit -m "SCRUM-2: Ajout de test.md"
4. Poussez votre branche pour la première fois
bash
git push -u origin SCRUM-2-team-jira-github-douae
L'option -u (ou --set-upstream) établit une relation de suivi entre votre branche locale et la branche distante.

5. Si vous rencontrez des erreurs
Si vous obtenez une erreur comme "Permission denied" ou "Authentication failed", vous devrez peut-être:

Configurer votre authentification GitHub (utiliser un token personnel ou une clé SSH)
Vérifier que vous avez les droits pour pousser vers ce dépôt
L'erreur la plus commune est:

remote: Permission to [repo-name] denied to [your-username].
fatal: unable to access 'https://github.com/username/repo-name.git/': The requested URL returned error: 403
Dans ce cas, vérifiez:

Que vous utilisez le bon nom d'utilisateur/mot de passe
Que vous avez les droits d'accès au dépôt
Si vous utilisez une authentification à deux facteurs, vous devrez utiliser un token d'accès personnel au lieu d'un mot de passe
6. Une fois la branche poussée
Une fois que vous avez réussi à pousser votre branche, allez sur GitHub et suivez les étapes pour créer une pull request comme je l'ai décrit précédemment.

Avez-vous besoin d'aide pour une étape spécifique ou rencontrez-vous une erreur particulière?





mais pas de pr

      - name: Extract Jira Issue Key
        id: extract_jira_key
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # Pour les push directs, analyser le message du commit
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Checking commit message: $COMMIT_MSG"
            
            # Chercher un code Jira dans le message de commit
            JIRA_KEY=$(echo "$COMMIT_MSG" | grep -oE '[A-Z]+-[0-9]+' | head -1)
            
            # Si non trouvé dans le dernier commit, chercher dans les 5 derniers commits
            if [ -z "$JIRA_name: Laravel Docker CI
on:
  # Déclenché lors d'un push sur n'importe quelle branche
  push:
    branches: ['*']
  # Déclenché lors d'une pull request vers main
  pull_request:
    branches: [main]
  # Déclenché lorsqu'une PR est fermée (mergée ou refusée)
  pull_request_target:
    types: [closed]

jobs:
  # Job qui s'exécute pour tous les push et pull requests
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder step
        run: echo "Build and test steps would go here"

  # Job qui s'exécute uniquement quand une PR est mergée dans main
  update-jira-status:
    # Dépend du job build-and-test
    needs: build-and-test
    # Condition: s'exécute soit sur un push direct à main, soit quand une PR est mergée dans main
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 10  # Pour avoir suffisamment d'historique

      - name: Debug Event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch ref: ${{ github.ref }}"
          
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "Push event detected"
            echo "Commit message: $(git log -1 --pretty=%B)"
          else
            echo "PR merged: ${{ github.event.pull_request.merged }}"
            echo "PR base branch: ${{ github.event.pull_request.base.ref }}"
            echo "PR head branch: ${{ github.event.pull_request.head.ref }}"
            echo "PR title: ${{ github.event.pull_request.title }}"
            echo "PR author: ${{ github.event.pull_request.user.login }}"
          fi
      
      - name: Extract Jira Issue Key
        id: extract_jira_key
        run: |
          # Extraire les informations de la PR
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
          
          echo "Checking PR title: $PR_TITLE"
          echo "Checking PR body: $PR_BODY"
          echo "Checking branch name: $PR_HEAD_BRANCH"
          
          # Chercher un code Jira dans le titre de la PR
          JIRA_KEY=$(echo "$PR_TITLE" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          
          # Si pas trouvé dans le titre, chercher dans la description
          if [ -z "$JIRA_KEY" ]; then
            JIRA_KEY=$(echo "$PR_BODY" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          fi
          
          # Si toujours pas trouvé, chercher dans le nom de la branche
          if [ -z "$JIRA_KEY" ]; then
            JIRA_KEY=$(echo "$PR_HEAD_BRANCH" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          fi
          
          if [ -n "$JIRA_KEY" ]; then
            echo "Found Jira ticket: $JIRA_KEY"
            echo "jira_key=$JIRA_KEY" >> $GITHUB_OUTPUT
          else
            echo "No Jira ticket found"
            echo "jira_key=" >> $GITHUB_OUTPUT
            exit 0  # Sortir sans erreur si pas de ticket Jira
          fi
      
      - name: Transition Jira Issue
        if: steps.extract_jira_key.outputs.jira_key != ''
        uses: atlassian/gajira-transition@v3
        with:
          issue: ${{ steps.extract_jira_key.outputs.jira_key }}
          transition: "TERMINE"
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
